// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: customer_service.proto

package customer_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("customer_service.proto", fileDescriptor_512a047699a06ac5) }

var fileDescriptor_512a047699a06ac5 = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0x7f, 0xb9, 0xf9, 0x5d, 0x58, 0x88, 0x6d, 0x01, 0x06, 0x0c, 0x51, 0x10, 0xff, 0xb4,
	0xd1, 0x6d, 0xdd, 0x3f, 0x1e, 0x60, 0x6b, 0x61, 0x9a, 0xb4, 0x41, 0xb5, 0x0e, 0x90, 0x90, 0x10,
	0xf2, 0x9a, 0xd3, 0xd6, 0x22, 0xff, 0x48, 0xdc, 0x89, 0x82, 0x84, 0xe0, 0x06, 0x24, 0x9e, 0x60,
	0x8f, 0xc4, 0x25, 0x8f, 0x80, 0xc6, 0x8b, 0xa0, 0xa6, 0xce, 0xec, 0xc4, 0xc7, 0x5e, 0x7a, 0xd9,
	0xf8, 0x73, 0xfc, 0xfd, 0xda, 0xe7, 0xc4, 0x3e, 0x29, 0x99, 0xef, 0x0e, 0x53, 0x1e, 0x05, 0x90,
	0xbc, 0x4b, 0x21, 0x39, 0x61, 0x5d, 0x58, 0x8d, 0x93, 0x88, 0x47, 0xee, 0x6c, 0xf9, 0xf9, 0xc2,
	0xe5, 0xfc, 0xc9, 0x84, 0xd8, 0x38, 0xbd, 0x47, 0x66, 0x9a, 0xe2, 0x51, 0x67, 0xc2, 0xb8, 0x3d,
	0x32, 0xb3, 0x1f, 0xf5, 0x59, 0xd8, 0x81, 0xd0, 0x7b, 0x71, 0xd4, 0xee, 0x04, 0xa9, 0xbb, 0xb8,
	0xaa, 0x29, 0x94, 0x90, 0x43, 0xf8, 0x30, 0x84, 0x94, 0x2f, 0x2c, 0x55, 0x20, 0xd3, 0x38, 0x0a,
	0x53, 0x70, 0x23, 0xe2, 0x66, 0x43, 0xcd, 0x28, 0xec, 0xb1, 0x24, 0x10, 0x52, 0x75, 0xc3, 0x04,
	0x05, 0x2a, 0x57, 0x5b, 0xae, 0x06, 0x0b, 0x41, 0x46, 0x66, 0x27, 0xa3, 0x03, 0xe8, 0xbe, 0xef,
	0x80, 0xdf, 0x63, 0xe0, 0x9a, 0xfc, 0x2a, 0x4c, 0x2e, 0xf6, 0xb8, 0x0a, 0x2a, 0xa4, 0x3e, 0x93,
	0x79, 0xe9, 0xe1, 0x10, 0xfa, 0x2c, 0xe5, 0x09, 0xe5, 0x2c, 0x0a, 0xdd, 0x86, 0x3e, 0x0b, 0x4e,
	0xe6, 0xb2, 0x6b, 0xd5, 0x03, 0xe4, 0x3a, 0x27, 0xcf, 0x21, 0xc9, 0x73, 0x8b, 0xad, 0xb3, 0xcc,
	0x58, 0xd6, 0xa9, 0xa3, 0x42, 0xea, 0x2d, 0xb9, 0xd4, 0x86, 0x24, 0x8d, 0x42, 0xea, 0xb7, 0x28,
	0xa7, 0xee, 0x43, 0x3d, 0x56, 0x1d, 0xcf, 0x25, 0x1e, 0x5d, 0x84, 0x89, 0xe9, 0x7f, 0x3a, 0xe4,
	0xd6, 0x2e, 0xf0, 0x5c, 0x56, 0x65, 0x76, 0x46, 0x7b, 0x9e, 0xbb, 0xa5, 0xcf, 0x63, 0xc1, 0x73,
	0xf5, 0x27, 0x53, 0x46, 0x09, 0x33, 0x3f, 0x1c, 0xb2, 0xf0, 0x32, 0xf6, 0x28, 0x07, 0x0c, 0x75,
	0x37, 0xf5, 0x59, 0xcd, 0x74, 0x6e, 0x65, 0x6b, 0xba, 0x20, 0xe1, 0xe4, 0x9b, 0x43, 0x6e, 0x88,
	0x17, 0xaa, 0x39, 0xa0, 0x61, 0x1f, 0xda, 0x83, 0x28, 0x84, 0xe7, 0xc3, 0xe0, 0x18, 0x12, 0x77,
	0x5d, 0x9f, 0xd2, 0xc4, 0xe6, 0x2e, 0x36, 0xa6, 0x09, 0x11, 0x1e, 0x3e, 0x91, 0x39, 0x5d, 0x7b,
	0xcb, 0x56, 0xab, 0x46, 0xf9, 0x46, 0xc5, 0x28, 0x63, 0x59, 0xd0, 0x34, 0x8d, 0xa3, 0x84, 0x57,
	0x2d, 0x8b, 0x12, 0x5e, 0xb1, 0x2c, 0xb4, 0x28, 0xdc, 0xcc, 0x9e, 0xb7, 0x33, 0x52, 0xd9, 0x0b,
	0xcc, 0x94, 0xf1, 0x6a, 0x66, 0xf4, 0x28, 0x61, 0xc6, 0x27, 0x73, 0xdb, 0x9e, 0xc7, 0xc6, 0xc7,
	0x01, 0xf5, 0x9b, 0x51, 0xc8, 0x69, 0x97, 0xbb, 0xc8, 0x0b, 0xad, 0x41, 0xb9, 0x6e, 0xbd, 0x12,
	0x2b, 0xeb, 0xf0, 0xae, 0xe2, 0x4a, 0x03, 0xb3, 0x64, 0xac, 0xa0, 0x2b, 0x31, 0x1a, 0x58, 0xad,
	0x8a, 0x0b, 0x0f, 0x5f, 0x1d, 0x72, 0x7b, 0x9f, 0xa5, 0x66, 0x13, 0x2e, 0x32, 0xe3, 0x38, 0xc0,
	0xe8, 0xa0, 0x51, 0x99, 0x17, 0x16, 0xbe, 0x3b, 0xe4, 0x4e, 0xf1, 0xad, 0xd5, 0x4d, 0xac, 0x99,
	0x5e, 0x74, 0xa3, 0x8d, 0xf5, 0x29, 0x22, 0x84, 0x91, 0x8f, 0xe4, 0xda, 0x2e, 0xf0, 0x67, 0x34,
	0x60, 0xfe, 0xe8, 0x10, 0xfc, 0xec, 0x56, 0xc8, 0x72, 0x80, 0x6f, 0xaa, 0x0e, 0x5a, 0xb6, 0xc0,
	0xc0, 0x2b, 0x77, 0x39, 0x4b, 0x4b, 0x04, 0x7a, 0x97, 0x6b, 0x94, 0xed, 0x2e, 0x47, 0x60, 0x21,
	0x98, 0x90, 0x2b, 0xe7, 0x8e, 0x3a, 0x9c, 0xf2, 0x61, 0x9a, 0x2d, 0x74, 0xd9, 0x62, 0x5c, 0x62,
	0xb9, 0xe4, 0x4a, 0x45, 0x5a, 0xe9, 0x1f, 0xce, 0x1d, 0x4d, 0xc6, 0xd1, 0xfe, 0xa1, 0xc4, 0xd8,
	0xfa, 0x07, 0x0d, 0x2d, 0x64, 0xf2, 0x69, 0x10, 0xfb, 0xd1, 0x28, 0x80, 0x90, 0x1f, 0x8d, 0x62,
	0xb0, 0x64, 0x52, 0x07, 0xed, 0x99, 0xc4, 0xf8, 0x62, 0x26, 0x8b, 0x84, 0x29, 0x93, 0x45, 0xea,
	0x82, 0x4c, 0x96, 0x61, 0xb9, 0xab, 0xca, 0x19, 0xd2, 0xf4, 0x29, 0x0b, 0xb0, 0x5d, 0x2d, 0x33,
	0x96, 0x5d, 0xd5, 0x51, 0x21, 0xd5, 0x23, 0x33, 0xca, 0x58, 0xb6, 0x9f, 0x8b, 0xd6, 0x70, 0x75,
	0x27, 0x97, 0x2a, 0x90, 0xb2, 0x2b, 0x52, 0x8f, 0x24, 0xac, 0x2b, 0x52, 0xc7, 0x2d, 0x5d, 0x51,
	0x11, 0x93, 0x29, 0x52, 0x94, 0x5b, 0xc0, 0x29, 0xf3, 0xd1, 0xc6, 0x59, 0xa7, 0x2c, 0x29, 0xc2,
	0x60, 0x21, 0xf8, 0x9a, 0x90, 0x16, 0xd0, 0x2e, 0x67, 0x27, 0x94, 0x83, 0x7b, 0x5f, 0x8f, 0x95,
	0xa3, 0xb9, 0xc0, 0x03, 0x3b, 0x24, 0xcb, 0xfc, 0xfc, 0xeb, 0x83, 0x53, 0x0e, 0x1d, 0x0e, 0xf1,
	0x78, 0xc9, 0x58, 0x99, 0xa3, 0xa0, 0xad, 0x85, 0xc0, 0x79, 0x79, 0x51, 0x6a, 0x00, 0x76, 0x51,
	0x6a, 0x90, 0xe5, 0xa2, 0x44, 0x58, 0x59, 0x10, 0xe3, 0xdf, 0xd9, 0xc0, 0xb6, 0xe7, 0x61, 0x05,
	0xa1, 0x8e, 0x5b, 0x0a, 0xa2, 0x88, 0xc9, 0x82, 0x68, 0x81, 0x0f, 0xf2, 0xfe, 0xc9, 0x4a, 0xbb,
	0x8e, 0xa5, 0xa0, 0x4c, 0x59, 0x0a, 0x02, 0x83, 0x85, 0xe0, 0x17, 0x72, 0x7d, 0x17, 0xf8, 0x01,
	0x24, 0xdd, 0x01, 0x0d, 0x79, 0x67, 0x78, 0x9c, 0x76, 0x13, 0x16, 0x67, 0x67, 0xfe, 0x1a, 0x5a,
	0x59, 0x18, 0x6a, 0xb9, 0xe8, 0x8c, 0x11, 0x4a, 0x2b, 0xde, 0x4c, 0x80, 0x72, 0x40, 0x3d, 0x20,
	0xad, 0xb8, 0x99, 0xb6, 0xb4, 0xe2, 0xb6, 0x20, 0xc5, 0xc9, 0x2b, 0x48, 0x58, 0x6f, 0x54, 0xd5,
	0x89, 0x99, 0xb6, 0x38, 0xb1, 0x05, 0xc9, 0xc3, 0x4d, 0xfd, 0x1a, 0x6c, 0x47, 0xe8, 0x67, 0x7b,
	0x09, 0xb1, 0x1c, 0x6e, 0x1a, 0x29, 0x8b, 0x6d, 0xdb, 0xf3, 0x94, 0x4e, 0x27, 0x81, 0x14, 0x3d,
	0x7d, 0x74, 0xca, 0x52, 0x6c, 0x18, 0x2c, 0x04, 0x87, 0xe4, 0x6a, 0xf9, 0xfb, 0xf3, 0xc0, 0xd0,
	0x58, 0x62, 0x9c, 0xa5, 0xb1, 0xc4, 0xf1, 0x89, 0xec, 0x4e, 0xfd, 0xd7, 0x59, 0xcd, 0xf9, 0x7d,
	0x56, 0x73, 0xfe, 0x9c, 0xd5, 0x9c, 0xd3, 0xbf, 0xb5, 0xff, 0xde, 0xdc, 0xec, 0x43, 0x98, 0xfd,
	0x6d, 0xd2, 0x28, 0xcf, 0x74, 0xfc, 0x7f, 0xf6, 0x7c, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x42, 0xc9, 0x20, 0xe1, 0x8a, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// login
	LoginSendOTPSms(ctx context.Context, in *LoginSendOTPSmsRequest, opts ...grpc.CallOption) (*LoginSendOTPSmsResponse, error)
	LoginConfirmOTPSms(ctx context.Context, in *LoginConfirmOTPSmsRequest, opts ...grpc.CallOption) (*LoginConfirmOTPSmsResponse, error)
	LoginCheckSelfie(ctx context.Context, in *LoginCheckSelfieRequest, opts ...grpc.CallOption) (*LoginCheckSelfieResponse, error)
	// registration
	ConfirmOTPRegistration(ctx context.Context, in *ConfirmOTPRegistrationRequest, opts ...grpc.CallOption) (*ConfirmOTPRegistrationResponse, error)
	RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error)
	// personal data
	PersonalData(ctx context.Context, in *PersonalDataRequest, opts ...grpc.CallOption) (*PersonalDataResponse, error)
	GetCustomerPersonalDataById(ctx context.Context, in *GetCustomerPersonalDataByIdRequest, opts ...grpc.CallOption) (*GetCustomerPersonalDataByIdResponse, error)
	UpdateCustomerPersonalData(ctx context.Context, in *UpdateCustomerPersonalDataRequest, opts ...grpc.CallOption) (*UpdateCustomerPersonalDataResponse, error)
	// change phone number
	SendOTPChangePhoneNumber(ctx context.Context, in *SendOTPChangePhoneNumberRequest, opts ...grpc.CallOption) (*SendOTPChangePhoneNumberResponse, error)
	ChangePhoneNumber(ctx context.Context, in *ConfirmOTPChangePhoneNumberRequest, opts ...grpc.CallOption) (*ConfirmOTPChangePhoneResponse, error)
	// passport data
	GetCustomerPassportDataById(ctx context.Context, in *GetCustomerPassportDataByIdRequest, opts ...grpc.CallOption) (*GetCustomerPassportDataByIdResponse, error)
	GetCustomerIdByPassportData(ctx context.Context, in *GetCustomerIdByPassportDataRequest, opts ...grpc.CallOption) (*GetCustomerIdByPassportDataResponse, error)
	// additional contact
	AdditionalContact(ctx context.Context, in *AdditionalContactRequest, opts ...grpc.CallOption) (*AdditionalContactResponse, error)
	GetCustomerAdditionalContactById(ctx context.Context, in *GetAdditionalContactRequest, opts ...grpc.CallOption) (*GetAdditionalContactResponse, error)
	ListCustomerAdditionalContact(ctx context.Context, in *ListAdditionalContactRequest, opts ...grpc.CallOption) (*ListAdditionalContactResponse, error)
	UpdateCustomerAdditionalContact(ctx context.Context, in *UpdateAdditionalContactRequest, opts ...grpc.CallOption) (*UpdateAdditionalContactResponse, error)
	// family relation
	GetFamilyRelationById(ctx context.Context, in *GetFamilyRelationByIdRequest, opts ...grpc.CallOption) (*GetFamilyRelationByIdResponse, error)
	ListFamilyRelation(ctx context.Context, in *ListFamilyRelationRequest, opts ...grpc.CallOption) (*ListFamilyRelationResponse, error)
	// family status
	GetFamilyStatusById(ctx context.Context, in *GetFamilyStatusByIdRequest, opts ...grpc.CallOption) (*GetFamilyStatusByIdResponse, error)
	ListFamilyStatus(ctx context.Context, in *ListFamilyStatusRequest, opts ...grpc.CallOption) (*ListFamilyStatusResponse, error)
	// employment
	GetEmploymentTypeById(ctx context.Context, in *GetEmploymentTypeByIdRequest, opts ...grpc.CallOption) (*GetEmploymentTypeByIdResponse, error)
	ListEmploymentType(ctx context.Context, in *ListEmploymentTypeRequest, opts ...grpc.CallOption) (*ListEmploymentTypeResponse, error)
	// claim
	GetCustomerClaim(ctx context.Context, in *GetCustomerClaimRequest, opts ...grpc.CallOption) (*GetCustomerClaimResponse, error)
	// customer
	GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error)
	ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error)
	GetCustomerDetails(ctx context.Context, in *GetCustomerDetailsRequest, opts ...grpc.CallOption) (*GetCustomerDetailsResponse, error)
	Deactivate(ctx context.Context, in *DeactivateRequest, opts ...grpc.CallOption) (*DeactivateResponse, error)
	//  state step
	CustomerStateStepList(ctx context.Context, in *CustomerStateStepListRequest, opts ...grpc.CallOption) (*CustomerStateStepListResponse, error)
	CustomerStateStep(ctx context.Context, in *CustomerStateStepRequest, opts ...grpc.CallOption) (*CustomerStateStepResponse, error)
	StepStateAdd(ctx context.Context, in *StepStateAddRequest, opts ...grpc.CallOption) (*StepStateAddResponse, error)
	DeleteCustomerById(ctx context.Context, in *DeleteCustomerByIdRequest, opts ...grpc.CallOption) (*DeleteCustomerByIdResponse, error)
	GetMerchantSubscription(ctx context.Context, in *GetMerchantSubscriptionRequest, opts ...grpc.CallOption) (*GetMerchantSubscriptionResponse, error)
	CreateMerchantSubscription(ctx context.Context, in *CreateMerchantSubscriptionRequest, opts ...grpc.CallOption) (*CreateMerchantSubscriptionResponse, error)
	VerifyMerchantSubscription(ctx context.Context, in *VerifyMerchantSubscriptionRequest, opts ...grpc.CallOption) (*VerifyMerchantSubscriptionResponse, error)
	// POS
	RegistrationPos(ctx context.Context, in *RegistrationPosRequest, opts ...grpc.CallOption) (*RegistrationPosResponse, error)
	AddCustomerAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error)
	// web pos
	RegisterCustomerMyId(ctx context.Context, in *RegisterCustomerMyIdRequest, opts ...grpc.CallOption) (*RegisterCustomerMyIdResponse, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) LoginSendOTPSms(ctx context.Context, in *LoginSendOTPSmsRequest, opts ...grpc.CallOption) (*LoginSendOTPSmsResponse, error) {
	out := new(LoginSendOTPSmsResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/LoginSendOTPSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) LoginConfirmOTPSms(ctx context.Context, in *LoginConfirmOTPSmsRequest, opts ...grpc.CallOption) (*LoginConfirmOTPSmsResponse, error) {
	out := new(LoginConfirmOTPSmsResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/LoginConfirmOTPSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) LoginCheckSelfie(ctx context.Context, in *LoginCheckSelfieRequest, opts ...grpc.CallOption) (*LoginCheckSelfieResponse, error) {
	out := new(LoginCheckSelfieResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/LoginCheckSelfie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ConfirmOTPRegistration(ctx context.Context, in *ConfirmOTPRegistrationRequest, opts ...grpc.CallOption) (*ConfirmOTPRegistrationResponse, error) {
	out := new(ConfirmOTPRegistrationResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ConfirmOTPRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error) {
	out := new(RegisterCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/RegisterCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) PersonalData(ctx context.Context, in *PersonalDataRequest, opts ...grpc.CallOption) (*PersonalDataResponse, error) {
	out := new(PersonalDataResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/PersonalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerPersonalDataById(ctx context.Context, in *GetCustomerPersonalDataByIdRequest, opts ...grpc.CallOption) (*GetCustomerPersonalDataByIdResponse, error) {
	out := new(GetCustomerPersonalDataByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerPersonalDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerPersonalData(ctx context.Context, in *UpdateCustomerPersonalDataRequest, opts ...grpc.CallOption) (*UpdateCustomerPersonalDataResponse, error) {
	out := new(UpdateCustomerPersonalDataResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/UpdateCustomerPersonalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SendOTPChangePhoneNumber(ctx context.Context, in *SendOTPChangePhoneNumberRequest, opts ...grpc.CallOption) (*SendOTPChangePhoneNumberResponse, error) {
	out := new(SendOTPChangePhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/SendOTPChangePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ChangePhoneNumber(ctx context.Context, in *ConfirmOTPChangePhoneNumberRequest, opts ...grpc.CallOption) (*ConfirmOTPChangePhoneResponse, error) {
	out := new(ConfirmOTPChangePhoneResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ChangePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerPassportDataById(ctx context.Context, in *GetCustomerPassportDataByIdRequest, opts ...grpc.CallOption) (*GetCustomerPassportDataByIdResponse, error) {
	out := new(GetCustomerPassportDataByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerPassportDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerIdByPassportData(ctx context.Context, in *GetCustomerIdByPassportDataRequest, opts ...grpc.CallOption) (*GetCustomerIdByPassportDataResponse, error) {
	out := new(GetCustomerIdByPassportDataResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerIdByPassportData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AdditionalContact(ctx context.Context, in *AdditionalContactRequest, opts ...grpc.CallOption) (*AdditionalContactResponse, error) {
	out := new(AdditionalContactResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/AdditionalContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerAdditionalContactById(ctx context.Context, in *GetAdditionalContactRequest, opts ...grpc.CallOption) (*GetAdditionalContactResponse, error) {
	out := new(GetAdditionalContactResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerAdditionalContactById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListCustomerAdditionalContact(ctx context.Context, in *ListAdditionalContactRequest, opts ...grpc.CallOption) (*ListAdditionalContactResponse, error) {
	out := new(ListAdditionalContactResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ListCustomerAdditionalContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerAdditionalContact(ctx context.Context, in *UpdateAdditionalContactRequest, opts ...grpc.CallOption) (*UpdateAdditionalContactResponse, error) {
	out := new(UpdateAdditionalContactResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/UpdateCustomerAdditionalContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetFamilyRelationById(ctx context.Context, in *GetFamilyRelationByIdRequest, opts ...grpc.CallOption) (*GetFamilyRelationByIdResponse, error) {
	out := new(GetFamilyRelationByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetFamilyRelationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListFamilyRelation(ctx context.Context, in *ListFamilyRelationRequest, opts ...grpc.CallOption) (*ListFamilyRelationResponse, error) {
	out := new(ListFamilyRelationResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ListFamilyRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetFamilyStatusById(ctx context.Context, in *GetFamilyStatusByIdRequest, opts ...grpc.CallOption) (*GetFamilyStatusByIdResponse, error) {
	out := new(GetFamilyStatusByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetFamilyStatusById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListFamilyStatus(ctx context.Context, in *ListFamilyStatusRequest, opts ...grpc.CallOption) (*ListFamilyStatusResponse, error) {
	out := new(ListFamilyStatusResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ListFamilyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetEmploymentTypeById(ctx context.Context, in *GetEmploymentTypeByIdRequest, opts ...grpc.CallOption) (*GetEmploymentTypeByIdResponse, error) {
	out := new(GetEmploymentTypeByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetEmploymentTypeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListEmploymentType(ctx context.Context, in *ListEmploymentTypeRequest, opts ...grpc.CallOption) (*ListEmploymentTypeResponse, error) {
	out := new(ListEmploymentTypeResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ListEmploymentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerClaim(ctx context.Context, in *GetCustomerClaimRequest, opts ...grpc.CallOption) (*GetCustomerClaimResponse, error) {
	out := new(GetCustomerClaimResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error) {
	out := new(GetCustomerByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	out := new(ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/ListCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerDetails(ctx context.Context, in *GetCustomerDetailsRequest, opts ...grpc.CallOption) (*GetCustomerDetailsResponse, error) {
	out := new(GetCustomerDetailsResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetCustomerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Deactivate(ctx context.Context, in *DeactivateRequest, opts ...grpc.CallOption) (*DeactivateResponse, error) {
	out := new(DeactivateResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerStateStepList(ctx context.Context, in *CustomerStateStepListRequest, opts ...grpc.CallOption) (*CustomerStateStepListResponse, error) {
	out := new(CustomerStateStepListResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/CustomerStateStepList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerStateStep(ctx context.Context, in *CustomerStateStepRequest, opts ...grpc.CallOption) (*CustomerStateStepResponse, error) {
	out := new(CustomerStateStepResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/CustomerStateStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) StepStateAdd(ctx context.Context, in *StepStateAddRequest, opts ...grpc.CallOption) (*StepStateAddResponse, error) {
	out := new(StepStateAddResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/StepStateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteCustomerById(ctx context.Context, in *DeleteCustomerByIdRequest, opts ...grpc.CallOption) (*DeleteCustomerByIdResponse, error) {
	out := new(DeleteCustomerByIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/DeleteCustomerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetMerchantSubscription(ctx context.Context, in *GetMerchantSubscriptionRequest, opts ...grpc.CallOption) (*GetMerchantSubscriptionResponse, error) {
	out := new(GetMerchantSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/GetMerchantSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CreateMerchantSubscription(ctx context.Context, in *CreateMerchantSubscriptionRequest, opts ...grpc.CallOption) (*CreateMerchantSubscriptionResponse, error) {
	out := new(CreateMerchantSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/CreateMerchantSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) VerifyMerchantSubscription(ctx context.Context, in *VerifyMerchantSubscriptionRequest, opts ...grpc.CallOption) (*VerifyMerchantSubscriptionResponse, error) {
	out := new(VerifyMerchantSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/VerifyMerchantSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) RegistrationPos(ctx context.Context, in *RegistrationPosRequest, opts ...grpc.CallOption) (*RegistrationPosResponse, error) {
	out := new(RegistrationPosResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/RegistrationPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddCustomerAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error) {
	out := new(AddCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/AddCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) RegisterCustomerMyId(ctx context.Context, in *RegisterCustomerMyIdRequest, opts ...grpc.CallOption) (*RegisterCustomerMyIdResponse, error) {
	out := new(RegisterCustomerMyIdResponse)
	err := c.cc.Invoke(ctx, "/customer_service.CustomerService/RegisterCustomerMyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// login
	LoginSendOTPSms(context.Context, *LoginSendOTPSmsRequest) (*LoginSendOTPSmsResponse, error)
	LoginConfirmOTPSms(context.Context, *LoginConfirmOTPSmsRequest) (*LoginConfirmOTPSmsResponse, error)
	LoginCheckSelfie(context.Context, *LoginCheckSelfieRequest) (*LoginCheckSelfieResponse, error)
	// registration
	ConfirmOTPRegistration(context.Context, *ConfirmOTPRegistrationRequest) (*ConfirmOTPRegistrationResponse, error)
	RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error)
	// personal data
	PersonalData(context.Context, *PersonalDataRequest) (*PersonalDataResponse, error)
	GetCustomerPersonalDataById(context.Context, *GetCustomerPersonalDataByIdRequest) (*GetCustomerPersonalDataByIdResponse, error)
	UpdateCustomerPersonalData(context.Context, *UpdateCustomerPersonalDataRequest) (*UpdateCustomerPersonalDataResponse, error)
	// change phone number
	SendOTPChangePhoneNumber(context.Context, *SendOTPChangePhoneNumberRequest) (*SendOTPChangePhoneNumberResponse, error)
	ChangePhoneNumber(context.Context, *ConfirmOTPChangePhoneNumberRequest) (*ConfirmOTPChangePhoneResponse, error)
	// passport data
	GetCustomerPassportDataById(context.Context, *GetCustomerPassportDataByIdRequest) (*GetCustomerPassportDataByIdResponse, error)
	GetCustomerIdByPassportData(context.Context, *GetCustomerIdByPassportDataRequest) (*GetCustomerIdByPassportDataResponse, error)
	// additional contact
	AdditionalContact(context.Context, *AdditionalContactRequest) (*AdditionalContactResponse, error)
	GetCustomerAdditionalContactById(context.Context, *GetAdditionalContactRequest) (*GetAdditionalContactResponse, error)
	ListCustomerAdditionalContact(context.Context, *ListAdditionalContactRequest) (*ListAdditionalContactResponse, error)
	UpdateCustomerAdditionalContact(context.Context, *UpdateAdditionalContactRequest) (*UpdateAdditionalContactResponse, error)
	// family relation
	GetFamilyRelationById(context.Context, *GetFamilyRelationByIdRequest) (*GetFamilyRelationByIdResponse, error)
	ListFamilyRelation(context.Context, *ListFamilyRelationRequest) (*ListFamilyRelationResponse, error)
	// family status
	GetFamilyStatusById(context.Context, *GetFamilyStatusByIdRequest) (*GetFamilyStatusByIdResponse, error)
	ListFamilyStatus(context.Context, *ListFamilyStatusRequest) (*ListFamilyStatusResponse, error)
	// employment
	GetEmploymentTypeById(context.Context, *GetEmploymentTypeByIdRequest) (*GetEmploymentTypeByIdResponse, error)
	ListEmploymentType(context.Context, *ListEmploymentTypeRequest) (*ListEmploymentTypeResponse, error)
	// claim
	GetCustomerClaim(context.Context, *GetCustomerClaimRequest) (*GetCustomerClaimResponse, error)
	// customer
	GetCustomerById(context.Context, *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error)
	ListCustomer(context.Context, *ListCustomerRequest) (*ListCustomerResponse, error)
	GetCustomerDetails(context.Context, *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error)
	Deactivate(context.Context, *DeactivateRequest) (*DeactivateResponse, error)
	//  state step
	CustomerStateStepList(context.Context, *CustomerStateStepListRequest) (*CustomerStateStepListResponse, error)
	CustomerStateStep(context.Context, *CustomerStateStepRequest) (*CustomerStateStepResponse, error)
	StepStateAdd(context.Context, *StepStateAddRequest) (*StepStateAddResponse, error)
	DeleteCustomerById(context.Context, *DeleteCustomerByIdRequest) (*DeleteCustomerByIdResponse, error)
	GetMerchantSubscription(context.Context, *GetMerchantSubscriptionRequest) (*GetMerchantSubscriptionResponse, error)
	CreateMerchantSubscription(context.Context, *CreateMerchantSubscriptionRequest) (*CreateMerchantSubscriptionResponse, error)
	VerifyMerchantSubscription(context.Context, *VerifyMerchantSubscriptionRequest) (*VerifyMerchantSubscriptionResponse, error)
	// POS
	RegistrationPos(context.Context, *RegistrationPosRequest) (*RegistrationPosResponse, error)
	AddCustomerAddress(context.Context, *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error)
	// web pos
	RegisterCustomerMyId(context.Context, *RegisterCustomerMyIdRequest) (*RegisterCustomerMyIdResponse, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) LoginSendOTPSms(ctx context.Context, req *LoginSendOTPSmsRequest) (*LoginSendOTPSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSendOTPSms not implemented")
}
func (*UnimplementedCustomerServiceServer) LoginConfirmOTPSms(ctx context.Context, req *LoginConfirmOTPSmsRequest) (*LoginConfirmOTPSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginConfirmOTPSms not implemented")
}
func (*UnimplementedCustomerServiceServer) LoginCheckSelfie(ctx context.Context, req *LoginCheckSelfieRequest) (*LoginCheckSelfieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCheckSelfie not implemented")
}
func (*UnimplementedCustomerServiceServer) ConfirmOTPRegistration(ctx context.Context, req *ConfirmOTPRegistrationRequest) (*ConfirmOTPRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOTPRegistration not implemented")
}
func (*UnimplementedCustomerServiceServer) RegisterCustomer(ctx context.Context, req *RegisterCustomerRequest) (*RegisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomer not implemented")
}
func (*UnimplementedCustomerServiceServer) PersonalData(ctx context.Context, req *PersonalDataRequest) (*PersonalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalData not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerPersonalDataById(ctx context.Context, req *GetCustomerPersonalDataByIdRequest) (*GetCustomerPersonalDataByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerPersonalDataById not implemented")
}
func (*UnimplementedCustomerServiceServer) UpdateCustomerPersonalData(ctx context.Context, req *UpdateCustomerPersonalDataRequest) (*UpdateCustomerPersonalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerPersonalData not implemented")
}
func (*UnimplementedCustomerServiceServer) SendOTPChangePhoneNumber(ctx context.Context, req *SendOTPChangePhoneNumberRequest) (*SendOTPChangePhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTPChangePhoneNumber not implemented")
}
func (*UnimplementedCustomerServiceServer) ChangePhoneNumber(ctx context.Context, req *ConfirmOTPChangePhoneNumberRequest) (*ConfirmOTPChangePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhoneNumber not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerPassportDataById(ctx context.Context, req *GetCustomerPassportDataByIdRequest) (*GetCustomerPassportDataByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerPassportDataById not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerIdByPassportData(ctx context.Context, req *GetCustomerIdByPassportDataRequest) (*GetCustomerIdByPassportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerIdByPassportData not implemented")
}
func (*UnimplementedCustomerServiceServer) AdditionalContact(ctx context.Context, req *AdditionalContactRequest) (*AdditionalContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdditionalContact not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerAdditionalContactById(ctx context.Context, req *GetAdditionalContactRequest) (*GetAdditionalContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAdditionalContactById not implemented")
}
func (*UnimplementedCustomerServiceServer) ListCustomerAdditionalContact(ctx context.Context, req *ListAdditionalContactRequest) (*ListAdditionalContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerAdditionalContact not implemented")
}
func (*UnimplementedCustomerServiceServer) UpdateCustomerAdditionalContact(ctx context.Context, req *UpdateAdditionalContactRequest) (*UpdateAdditionalContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerAdditionalContact not implemented")
}
func (*UnimplementedCustomerServiceServer) GetFamilyRelationById(ctx context.Context, req *GetFamilyRelationByIdRequest) (*GetFamilyRelationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFamilyRelationById not implemented")
}
func (*UnimplementedCustomerServiceServer) ListFamilyRelation(ctx context.Context, req *ListFamilyRelationRequest) (*ListFamilyRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFamilyRelation not implemented")
}
func (*UnimplementedCustomerServiceServer) GetFamilyStatusById(ctx context.Context, req *GetFamilyStatusByIdRequest) (*GetFamilyStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFamilyStatusById not implemented")
}
func (*UnimplementedCustomerServiceServer) ListFamilyStatus(ctx context.Context, req *ListFamilyStatusRequest) (*ListFamilyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFamilyStatus not implemented")
}
func (*UnimplementedCustomerServiceServer) GetEmploymentTypeById(ctx context.Context, req *GetEmploymentTypeByIdRequest) (*GetEmploymentTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmploymentTypeById not implemented")
}
func (*UnimplementedCustomerServiceServer) ListEmploymentType(ctx context.Context, req *ListEmploymentTypeRequest) (*ListEmploymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmploymentType not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerClaim(ctx context.Context, req *GetCustomerClaimRequest) (*GetCustomerClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerClaim not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerById(ctx context.Context, req *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (*UnimplementedCustomerServiceServer) ListCustomer(ctx context.Context, req *ListCustomerRequest) (*ListCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomer not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomerDetails(ctx context.Context, req *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerDetails not implemented")
}
func (*UnimplementedCustomerServiceServer) Deactivate(ctx context.Context, req *DeactivateRequest) (*DeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (*UnimplementedCustomerServiceServer) CustomerStateStepList(ctx context.Context, req *CustomerStateStepListRequest) (*CustomerStateStepListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerStateStepList not implemented")
}
func (*UnimplementedCustomerServiceServer) CustomerStateStep(ctx context.Context, req *CustomerStateStepRequest) (*CustomerStateStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerStateStep not implemented")
}
func (*UnimplementedCustomerServiceServer) StepStateAdd(ctx context.Context, req *StepStateAddRequest) (*StepStateAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StepStateAdd not implemented")
}
func (*UnimplementedCustomerServiceServer) DeleteCustomerById(ctx context.Context, req *DeleteCustomerByIdRequest) (*DeleteCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerById not implemented")
}
func (*UnimplementedCustomerServiceServer) GetMerchantSubscription(ctx context.Context, req *GetMerchantSubscriptionRequest) (*GetMerchantSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantSubscription not implemented")
}
func (*UnimplementedCustomerServiceServer) CreateMerchantSubscription(ctx context.Context, req *CreateMerchantSubscriptionRequest) (*CreateMerchantSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchantSubscription not implemented")
}
func (*UnimplementedCustomerServiceServer) VerifyMerchantSubscription(ctx context.Context, req *VerifyMerchantSubscriptionRequest) (*VerifyMerchantSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMerchantSubscription not implemented")
}
func (*UnimplementedCustomerServiceServer) RegistrationPos(ctx context.Context, req *RegistrationPosRequest) (*RegistrationPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationPos not implemented")
}
func (*UnimplementedCustomerServiceServer) AddCustomerAddress(ctx context.Context, req *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerAddress not implemented")
}
func (*UnimplementedCustomerServiceServer) RegisterCustomerMyId(ctx context.Context, req *RegisterCustomerMyIdRequest) (*RegisterCustomerMyIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomerMyId not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_LoginSendOTPSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSendOTPSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).LoginSendOTPSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/LoginSendOTPSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).LoginSendOTPSms(ctx, req.(*LoginSendOTPSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_LoginConfirmOTPSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginConfirmOTPSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).LoginConfirmOTPSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/LoginConfirmOTPSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).LoginConfirmOTPSms(ctx, req.(*LoginConfirmOTPSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_LoginCheckSelfie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCheckSelfieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).LoginCheckSelfie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/LoginCheckSelfie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).LoginCheckSelfie(ctx, req.(*LoginCheckSelfieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ConfirmOTPRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOTPRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ConfirmOTPRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ConfirmOTPRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ConfirmOTPRegistration(ctx, req.(*ConfirmOTPRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_RegisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RegisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/RegisterCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RegisterCustomer(ctx, req.(*RegisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_PersonalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).PersonalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/PersonalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).PersonalData(ctx, req.(*PersonalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerPersonalDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerPersonalDataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerPersonalDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerPersonalDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerPersonalDataById(ctx, req.(*GetCustomerPersonalDataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerPersonalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerPersonalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerPersonalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/UpdateCustomerPersonalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerPersonalData(ctx, req.(*UpdateCustomerPersonalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SendOTPChangePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOTPChangePhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SendOTPChangePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/SendOTPChangePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SendOTPChangePhoneNumber(ctx, req.(*SendOTPChangePhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ChangePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOTPChangePhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ChangePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ChangePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ChangePhoneNumber(ctx, req.(*ConfirmOTPChangePhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerPassportDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerPassportDataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerPassportDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerPassportDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerPassportDataById(ctx, req.(*GetCustomerPassportDataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerIdByPassportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerIdByPassportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerIdByPassportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerIdByPassportData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerIdByPassportData(ctx, req.(*GetCustomerIdByPassportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AdditionalContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdditionalContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AdditionalContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/AdditionalContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AdditionalContact(ctx, req.(*AdditionalContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerAdditionalContactById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdditionalContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerAdditionalContactById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerAdditionalContactById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerAdditionalContactById(ctx, req.(*GetAdditionalContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListCustomerAdditionalContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdditionalContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListCustomerAdditionalContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ListCustomerAdditionalContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListCustomerAdditionalContact(ctx, req.(*ListAdditionalContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerAdditionalContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdditionalContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerAdditionalContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/UpdateCustomerAdditionalContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerAdditionalContact(ctx, req.(*UpdateAdditionalContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetFamilyRelationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFamilyRelationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetFamilyRelationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetFamilyRelationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetFamilyRelationById(ctx, req.(*GetFamilyRelationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListFamilyRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFamilyRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListFamilyRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ListFamilyRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListFamilyRelation(ctx, req.(*ListFamilyRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetFamilyStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFamilyStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetFamilyStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetFamilyStatusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetFamilyStatusById(ctx, req.(*GetFamilyStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListFamilyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFamilyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListFamilyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ListFamilyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListFamilyStatus(ctx, req.(*ListFamilyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetEmploymentTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmploymentTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetEmploymentTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetEmploymentTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetEmploymentTypeById(ctx, req.(*GetEmploymentTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListEmploymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmploymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListEmploymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ListEmploymentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListEmploymentType(ctx, req.(*ListEmploymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerClaim(ctx, req.(*GetCustomerClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerById(ctx, req.(*GetCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/ListCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListCustomer(ctx, req.(*ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetCustomerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerDetails(ctx, req.(*GetCustomerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Deactivate(ctx, req.(*DeactivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerStateStepList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerStateStepListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerStateStepList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/CustomerStateStepList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerStateStepList(ctx, req.(*CustomerStateStepListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerStateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerStateStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerStateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/CustomerStateStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerStateStep(ctx, req.(*CustomerStateStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_StepStateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepStateAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).StepStateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/StepStateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).StepStateAdd(ctx, req.(*StepStateAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/DeleteCustomerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteCustomerById(ctx, req.(*DeleteCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetMerchantSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetMerchantSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/GetMerchantSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetMerchantSubscription(ctx, req.(*GetMerchantSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CreateMerchantSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateMerchantSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/CreateMerchantSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateMerchantSubscription(ctx, req.(*CreateMerchantSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_VerifyMerchantSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMerchantSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).VerifyMerchantSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/VerifyMerchantSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).VerifyMerchantSubscription(ctx, req.(*VerifyMerchantSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_RegistrationPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RegistrationPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/RegistrationPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RegistrationPos(ctx, req.(*RegistrationPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/AddCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddCustomerAddress(ctx, req.(*AddCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_RegisterCustomerMyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerMyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RegisterCustomerMyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer_service.CustomerService/RegisterCustomerMyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RegisterCustomerMyId(ctx, req.(*RegisterCustomerMyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer_service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginSendOTPSms",
			Handler:    _CustomerService_LoginSendOTPSms_Handler,
		},
		{
			MethodName: "LoginConfirmOTPSms",
			Handler:    _CustomerService_LoginConfirmOTPSms_Handler,
		},
		{
			MethodName: "LoginCheckSelfie",
			Handler:    _CustomerService_LoginCheckSelfie_Handler,
		},
		{
			MethodName: "ConfirmOTPRegistration",
			Handler:    _CustomerService_ConfirmOTPRegistration_Handler,
		},
		{
			MethodName: "RegisterCustomer",
			Handler:    _CustomerService_RegisterCustomer_Handler,
		},
		{
			MethodName: "PersonalData",
			Handler:    _CustomerService_PersonalData_Handler,
		},
		{
			MethodName: "GetCustomerPersonalDataById",
			Handler:    _CustomerService_GetCustomerPersonalDataById_Handler,
		},
		{
			MethodName: "UpdateCustomerPersonalData",
			Handler:    _CustomerService_UpdateCustomerPersonalData_Handler,
		},
		{
			MethodName: "SendOTPChangePhoneNumber",
			Handler:    _CustomerService_SendOTPChangePhoneNumber_Handler,
		},
		{
			MethodName: "ChangePhoneNumber",
			Handler:    _CustomerService_ChangePhoneNumber_Handler,
		},
		{
			MethodName: "GetCustomerPassportDataById",
			Handler:    _CustomerService_GetCustomerPassportDataById_Handler,
		},
		{
			MethodName: "GetCustomerIdByPassportData",
			Handler:    _CustomerService_GetCustomerIdByPassportData_Handler,
		},
		{
			MethodName: "AdditionalContact",
			Handler:    _CustomerService_AdditionalContact_Handler,
		},
		{
			MethodName: "GetCustomerAdditionalContactById",
			Handler:    _CustomerService_GetCustomerAdditionalContactById_Handler,
		},
		{
			MethodName: "ListCustomerAdditionalContact",
			Handler:    _CustomerService_ListCustomerAdditionalContact_Handler,
		},
		{
			MethodName: "UpdateCustomerAdditionalContact",
			Handler:    _CustomerService_UpdateCustomerAdditionalContact_Handler,
		},
		{
			MethodName: "GetFamilyRelationById",
			Handler:    _CustomerService_GetFamilyRelationById_Handler,
		},
		{
			MethodName: "ListFamilyRelation",
			Handler:    _CustomerService_ListFamilyRelation_Handler,
		},
		{
			MethodName: "GetFamilyStatusById",
			Handler:    _CustomerService_GetFamilyStatusById_Handler,
		},
		{
			MethodName: "ListFamilyStatus",
			Handler:    _CustomerService_ListFamilyStatus_Handler,
		},
		{
			MethodName: "GetEmploymentTypeById",
			Handler:    _CustomerService_GetEmploymentTypeById_Handler,
		},
		{
			MethodName: "ListEmploymentType",
			Handler:    _CustomerService_ListEmploymentType_Handler,
		},
		{
			MethodName: "GetCustomerClaim",
			Handler:    _CustomerService_GetCustomerClaim_Handler,
		},
		{
			MethodName: "GetCustomerById",
			Handler:    _CustomerService_GetCustomerById_Handler,
		},
		{
			MethodName: "ListCustomer",
			Handler:    _CustomerService_ListCustomer_Handler,
		},
		{
			MethodName: "GetCustomerDetails",
			Handler:    _CustomerService_GetCustomerDetails_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _CustomerService_Deactivate_Handler,
		},
		{
			MethodName: "CustomerStateStepList",
			Handler:    _CustomerService_CustomerStateStepList_Handler,
		},
		{
			MethodName: "CustomerStateStep",
			Handler:    _CustomerService_CustomerStateStep_Handler,
		},
		{
			MethodName: "StepStateAdd",
			Handler:    _CustomerService_StepStateAdd_Handler,
		},
		{
			MethodName: "DeleteCustomerById",
			Handler:    _CustomerService_DeleteCustomerById_Handler,
		},
		{
			MethodName: "GetMerchantSubscription",
			Handler:    _CustomerService_GetMerchantSubscription_Handler,
		},
		{
			MethodName: "CreateMerchantSubscription",
			Handler:    _CustomerService_CreateMerchantSubscription_Handler,
		},
		{
			MethodName: "VerifyMerchantSubscription",
			Handler:    _CustomerService_VerifyMerchantSubscription_Handler,
		},
		{
			MethodName: "RegistrationPos",
			Handler:    _CustomerService_RegistrationPos_Handler,
		},
		{
			MethodName: "AddCustomerAddress",
			Handler:    _CustomerService_AddCustomerAddress_Handler,
		},
		{
			MethodName: "RegisterCustomerMyId",
			Handler:    _CustomerService_RegisterCustomerMyId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer_service.proto",
}

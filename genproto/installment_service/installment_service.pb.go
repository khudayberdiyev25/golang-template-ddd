// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: installment_service.proto

package installment_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("installment_service.proto", fileDescriptor_cfae85eda1ca21c7) }

var fileDescriptor_cfae85eda1ca21c7 = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xdd, 0x8e, 0xe3, 0x34,
	0x14, 0xc7, 0xc9, 0x0d, 0x17, 0x16, 0x5f, 0xe3, 0x85, 0x5d, 0xe8, 0x2e, 0xbd, 0x41, 0x2b, 0x01,
	0x0b, 0xe9, 0x7e, 0x01, 0xbb, 0xcb, 0x05, 0xb4, 0x5d, 0x18, 0x55, 0xda, 0x61, 0xca, 0x56, 0x08,
	0x34, 0x37, 0x23, 0x37, 0x39, 0xcd, 0x44, 0x93, 0xc6, 0xc1, 0x76, 0x06, 0x55, 0x48, 0x5c, 0x21,
	0xc1, 0x0d, 0x12, 0x12, 0x12, 0x82, 0x37, 0xe0, 0x51, 0xb8, 0xe4, 0x09, 0x10, 0x1a, 0x5e, 0x04,
	0xb5, 0xb1, 0xa9, 0x9b, 0xd8, 0x8e, 0xd3, 0x6b, 0xff, 0xfe, 0xe7, 0xfc, 0x1d, 0xdb, 0xe7, 0x9c,
	0x16, 0xbd, 0x96, 0xe6, 0x5c, 0x90, 0x2c, 0x5b, 0x42, 0x2e, 0x4e, 0x39, 0xb0, 0x8b, 0x34, 0x82,
	0xb0, 0x60, 0x54, 0x50, 0x7c, 0xc5, 0xb0, 0xd4, 0xbb, 0x9e, 0x50, 0x9a, 0x64, 0x30, 0xd8, 0x20,
	0xf3, 0x72, 0x31, 0x80, 0x65, 0x21, 0x56, 0x95, 0xa2, 0xf7, 0xfc, 0x12, 0x38, 0x27, 0x89, 0x0c,
	0x70, 0xf7, 0xef, 0x9b, 0x08, 0x4f, 0xb6, 0x31, 0x66, 0x55, 0x08, 0x4c, 0xd1, 0x4b, 0x4f, 0x52,
	0x2e, 0xb4, 0x15, 0x8e, 0xdf, 0x09, 0x4d, 0x3e, 0xea, 0xd8, 0x53, 0xf8, 0xba, 0x04, 0x2e, 0x7a,
	0xef, 0x7a, 0xd2, 0xbc, 0xa0, 0x39, 0x07, 0xfc, 0x1d, 0x7a, 0xa5, 0xb6, 0x36, 0x13, 0x44, 0x00,
	0xc7, 0x77, 0x7c, 0xe2, 0x54, 0xac, 0x4a, 0x7d, 0xb7, 0x8b, 0x44, 0xe6, 0xff, 0x3e, 0x40, 0xd7,
	0x0c, 0x44, 0xc9, 0x81, 0xe3, 0x7b, 0xbe, 0xf1, 0xd6, 0xb4, 0x32, 0x71, 0xbf, 0x9b, 0x48, 0xda,
	0xf8, 0x29, 0x40, 0xbd, 0x1a, 0x33, 0x14, 0x82, 0x44, 0x67, 0xd5, 0x11, 0xbc, 0xef, 0x13, 0x54,
	0x13, 0x28, 0x33, 0x1f, 0x74, 0xd6, 0x49, 0x3f, 0x3f, 0x07, 0xe8, 0xfa, 0x98, 0x01, 0x11, 0x60,
	0x04, 0xb1, 0x39, 0xb0, 0x43, 0xa1, 0x1c, 0x3d, 0xe8, 0x2e, 0xb4, 0x9f, 0xd4, 0x94, 0xac, 0xaa,
	0xef, 0xe3, 0x75, 0x52, 0x8a, 0xee, 0x74, 0x52, 0x5b, 0x91, 0xb4, 0x51, 0x22, 0x7c, 0x08, 0x3a,
	0x31, 0x5a, 0x4d, 0x62, 0x1c, 0x1a, 0x63, 0x35, 0x41, 0x95, 0x7b, 0xe0, 0xcd, 0xcb, 0xb4, 0xbf,
	0x07, 0xa8, 0x5f, 0x5f, 0x1e, 0xd3, 0x5c, 0x30, 0x12, 0x89, 0xcf, 0xca, 0xe5, 0x1c, 0x18, 0x7e,
	0xe4, 0x15, 0x73, 0x57, 0xa4, 0xfc, 0x7c, 0xb8, 0x97, 0x56, 0x7a, 0xfb, 0x35, 0x40, 0xaf, 0xd7,
	0xd1, 0x61, 0x51, 0x64, 0x69, 0x44, 0x44, 0x4a, 0xf3, 0x49, 0x8c, 0x1f, 0x7a, 0x85, 0xdf, 0xd1,
	0x28, 0x67, 0x8f, 0xf6, 0x91, 0x4a, 0x63, 0x0c, 0x1d, 0x68, 0xd4, 0x98, 0xe4, 0x11, 0x64, 0xd8,
	0x5c, 0xa0, 0x1a, 0x9c, 0xca, 0x1f, 0xfa, 0xe2, 0x32, 0x67, 0x84, 0x9e, 0x1b, 0xa5, 0x59, 0x96,
	0xe6, 0xc9, 0x53, 0xe0, 0x20, 0xf0, 0x9b, 0x46, 0xbd, 0x8e, 0xa8, 0x4c, 0x6f, 0x79, 0x90, 0x3b,
	0x97, 0x50, 0xde, 0xcd, 0x59, 0x74, 0x06, 0x71, 0x99, 0x81, 0xfd, 0x12, 0xd6, 0xc0, 0xd6, 0x4b,
	0xd8, 0xe0, 0xb7, 0xdf, 0xb3, 0x7a, 0xa9, 0xda, 0xe7, 0xb6, 0x7c, 0xcf, 0x06, 0xe7, 0xfe, 0x9e,
	0x06, 0x5c, 0xe6, 0x4c, 0xd1, 0x0b, 0x87, 0x20, 0xf4, 0x84, 0x6f, 0xdb, 0x6c, 0x1b, 0xb2, 0xdd,
	0xf2, 0x62, 0x65, 0xaa, 0x05, 0xba, 0x36, 0x2e, 0xb9, 0xa0, 0x4b, 0x60, 0xc3, 0x84, 0x01, 0x6c,
	0x0a, 0x51, 0x14, 0x41, 0x21, 0x2c, 0x05, 0xc6, 0x42, 0xab, 0xe4, 0x57, 0xc3, 0xaa, 0x21, 0x87,
	0xaa, 0x21, 0x87, 0x9f, 0xac, 0x1b, 0xf2, 0xba, 0xc9, 0xee, 0x3a, 0x98, 0xc4, 0x96, 0x26, 0x5b,
	0xc7, 0xdc, 0x4d, 0xb6, 0x49, 0xcb, 0x8d, 0xe5, 0x55, 0x57, 0xd7, 0x16, 0x5d, 0x5d, 0x5d, 0xc7,
	0x54, 0x42, 0x2f, 0xba, 0xde, 0xd4, 0xb5, 0xa5, 0xd6, 0xa6, 0xde, 0x60, 0xdb, 0x9b, 0xba, 0x41,
	0x22, 0xf3, 0x7f, 0x85, 0x0e, 0xbe, 0x28, 0xe2, 0xda, 0x3d, 0xbd, 0xd5, 0xf6, 0x90, 0x35, 0xd8,
	0x7a, 0x74, 0xcd, 0x9d, 0x8d, 0x08, 0x3f, 0x07, 0xe1, 0xb7, 0xb3, 0x8a, 0xed, 0xb4, 0x33, 0x25,
	0xa9, 0x35, 0xc1, 0xda, 0xde, 0x5b, 0xc6, 0x15, 0x03, 0xdd, 0xde, 0x04, 0x8d, 0x22, 0x69, 0xe3,
	0x97, 0x00, 0xdd, 0x68, 0x3c, 0xd9, 0x23, 0xc2, 0xce, 0x41, 0x14, 0x19, 0x89, 0x00, 0x3f, 0xf0,
	0x7b, 0xe5, 0x9a, 0x44, 0x19, 0x7a, 0xb8, 0x87, 0x52, 0xba, 0xfa, 0x16, 0xbd, 0x3c, 0x8b, 0x48,
	0xfe, 0x39, 0xfb, 0x94, 0x32, 0xdd, 0xcc, 0x6d, 0x63, 0x48, 0x13, 0xaa, 0x4c, 0xdc, 0xe9, 0xa0,
	0x90, 0xc9, 0xff, 0x08, 0xd0, 0x1b, 0x8d, 0x31, 0x66, 0xb4, 0xd2, 0xd0, 0xe3, 0xc5, 0x02, 0x18,
	0xfe, 0xc8, 0x6f, 0x00, 0x6a, 0x2a, 0x95, 0xb7, 0x8f, 0xf7, 0x0f, 0xa0, 0x0d, 0x9b, 0x8d, 0x0f,
	0xfa, 0x25, 0xcc, 0xa7, 0x94, 0x09, 0x92, 0x59, 0x86, 0x4d, 0xbb, 0xc0, 0x3d, 0x6c, 0xba, 0x74,
	0xd2, 0xcf, 0x09, 0x3a, 0xd0, 0xd6, 0x9d, 0x6d, 0xba, 0xc1, 0xb5, 0xd5, 0xda, 0x1f, 0x03, 0x74,
	0x73, 0x77, 0x58, 0x78, 0x0c, 0x82, 0xa4, 0x19, 0x6f, 0x8c, 0x4f, 0xad, 0x8d, 0x5e, 0x0a, 0xdd,
	0xdd, 0xd3, 0xc4, 0xcb, 0x6d, 0xfe, 0x10, 0xa0, 0x57, 0x0f, 0x41, 0xa8, 0xa6, 0x71, 0x7c, 0x01,
	0x2c, 0x2e, 0x61, 0xb8, 0xa4, 0x65, 0x2e, 0xf0, 0x7d, 0x5b, 0x45, 0x37, 0xe2, 0xca, 0xc3, 0x7b,
	0x1d, 0x55, 0xdb, 0x87, 0x52, 0x1d, 0xcb, 0x94, 0xd1, 0xb8, 0x8c, 0xc4, 0x24, 0xbf, 0xa0, 0xa9,
	0xf5, 0xa1, 0x98, 0x50, 0xf7, 0x43, 0x31, 0x2b, 0xb6, 0xc9, 0xab, 0xe2, 0xec, 0x95, 0xdc, 0x84,
	0xba, 0x93, 0x9b, 0x15, 0xdb, 0xc1, 0x69, 0x5d, 0xdb, 0x6a, 0xa9, 0x43, 0x6b, 0x11, 0x34, 0x27,
	0x1e, 0x78, 0xf3, 0xbb, 0xd3, 0xbb, 0x3a, 0x15, 0xfd, 0xf7, 0x45, 0x25, 0xe0, 0xf6, 0xe9, 0xdd,
	0x21, 0x6a, 0x9d, 0xde, 0x9d, 0xda, 0xff, 0xcf, 0xe3, 0xaa, 0x99, 0xc4, 0x03, 0xe7, 0xd0, 0xa3,
	0x91, 0xca, 0xc7, 0x6d, 0x7f, 0x81, 0xd6, 0xcf, 0xd6, 0x77, 0x94, 0x64, 0xd9, 0xce, 0xdf, 0x03,
	0x44, 0x80, 0xa5, 0x9f, 0x59, 0x68, 0x77, 0x3f, 0xb3, 0x8a, 0xa4, 0x8d, 0x53, 0x74, 0x65, 0x98,
	0x24, 0x0c, 0x12, 0x22, 0x60, 0xb4, 0x3a, 0x02, 0x16, 0x9d, 0x91, 0x5c, 0x60, 0x4b, 0x51, 0xb1,
	0xec, 0xd3, 0x10, 0x41, 0x9f, 0x9c, 0xa5, 0x87, 0x29, 0xa3, 0x8b, 0x54, 0x3c, 0xa1, 0x9c, 0x5b,
	0x4a, 0x5c, 0x83, 0x73, 0x4f, 0xce, 0x06, 0x5c, 0xe6, 0xcc, 0xd0, 0x8b, 0x47, 0xe4, 0x1c, 0x1e,
	0xd3, 0x6f, 0x72, 0x39, 0xd0, 0x5b, 0x66, 0xa0, 0x1a, 0xe5, 0x9e, 0xf9, 0x1a, 0xb0, 0xd6, 0x54,
	0xf4, 0x5f, 0x45, 0x9b, 0x12, 0x30, 0x5a, 0x1d, 0xb3, 0x18, 0xd8, 0x24, 0xb6, 0x34, 0x15, 0xbb,
	0xc0, 0xdd, 0x54, 0x5c, 0xba, 0xca, 0xcf, 0x28, 0xfc, 0xf3, 0xb2, 0x1f, 0xfc, 0x75, 0xd9, 0x0f,
	0xfe, 0xb9, 0xec, 0x07, 0xbf, 0xfd, 0xdb, 0x7f, 0xe6, 0xe4, 0x46, 0x02, 0xf9, 0xe6, 0x20, 0x07,
	0x86, 0x90, 0xf3, 0x67, 0x37, 0x4b, 0xf7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x0e, 0x98,
	0x22, 0x75, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InstallmentServiceClient is the client API for InstallmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstallmentServiceClient interface {
	// INSTALLMENT
	ListInstallments(ctx context.Context, in *ListInstallmentsRequest, opts ...grpc.CallOption) (*ListInstallmentsResponse, error)
	ListInstallmentStates(ctx context.Context, in *ListInstallmentStatesRequest, opts ...grpc.CallOption) (*ListInstallmentStatesResponse, error)
	ListInstallmentStatuses(ctx context.Context, in *ListInstallmentStatusesRequest, opts ...grpc.CallOption) (*ListInstallmentStatusesResponse, error)
	ListInstallmentAttachments(ctx context.Context, in *ListInstallmentAttachmentsRequest, opts ...grpc.CallOption) (*ListInstallmentAttachmentsResponse, error)
	CreateInstallmentAttachment(ctx context.Context, in *CreateInstallmentAttachmentRequest, opts ...grpc.CallOption) (*CreateInstallmentAttachmentResponse, error)
	ListInstallmentPayments(ctx context.Context, in *ListInstallmentPaymentsRequest, opts ...grpc.CallOption) (*ListInstallmentPaymentsResponse, error)
	GetInstallmentById(ctx context.Context, in *GetInstallmentByIdRequest, opts ...grpc.CallOption) (*GetInstallmentByIdResponse, error)
	GetInstallmentByContractNumber(ctx context.Context, in *GetInstallmentByContractNumberRequest, opts ...grpc.CallOption) (*GetInstallmentByContractNumberResponse, error)
	GetInstallmentByApplicationId(ctx context.Context, in *GetInstallmentByApplicationIdRequest, opts ...grpc.CallOption) (*GetInstallmentByApplicationIdResponse, error)
	InstallmentCancel(ctx context.Context, in *InstallmentCancelRequest, opts ...grpc.CallOption) (*InstallmentCancelResponse, error)
	// BILLNING
	BillingReset(ctx context.Context, in *BillingResetRequest, opts ...grpc.CallOption) (*BillingResetResponse, error)
	// PAYMENT SCHEDULE
	GetPaymentSchedule(ctx context.Context, in *GetPaymentScheduleRequest, opts ...grpc.CallOption) (*GetPaymentScheduleResponse, error)
	// PAY REGISTRATION
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	CustomerAgreementAccept(ctx context.Context, in *CustomerAgreementAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApplicationId(ctx context.Context, in *GetApplicationIdRequest, opts ...grpc.CallOption) (*GetApplicationIdResponse, error)
	// APPLICATION
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
	ListApplicationStates(ctx context.Context, in *ListApplicationStatesRequest, opts ...grpc.CallOption) (*ListApplicationStatesResponse, error)
	UpdateApplication(ctx context.Context, in *InstallmentApplication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListApplicationBasket(ctx context.Context, in *ListApplicationBasketRequest, opts ...grpc.CallOption) (*ListApplicationBasketResponse, error)
	ListApplicationStatuses(ctx context.Context, in *ListApplicationStatusesRequest, opts ...grpc.CallOption) (*ListApplicationStatusesResponse, error)
	// MARKETPLACE
	CreateApplicationMarketplace(ctx context.Context, in *CreateApplicationMarketplaceRequest, opts ...grpc.CallOption) (*CreateApplicationMarketplaceResponse, error)
	ScanQrForMarketplace(ctx context.Context, in *ScanQrForMarketplaceRequest, opts ...grpc.CallOption) (*ScanQrForMarketplaceResponse, error)
	CreateInstallmentByMarketplaceOffer(ctx context.Context, in *CreateInstallmentByMarketplaceOfferRequest, opts ...grpc.CallOption) (*CreateInstallmentByMarketplaceOfferResponse, error)
	// WEB PORTAL
	CreateApplicationWebPortal(ctx context.Context, in *CreateApplicationWebPortalRequest, opts ...grpc.CallOption) (*CreateApplicationWebPortalResponse, error)
	ApplicationCancel(ctx context.Context, in *ApplicationCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	GetInstallmentDetailsByContractNumber(ctx context.Context, in *InstallmentDetailsRequest, opts ...grpc.CallOption) (*InstallmentDetailsResponse, error)
	GetCustomerOverdueAmount(ctx context.Context, in *GetCustomerOverdueAmountRequest, opts ...grpc.CallOption) (*GetCustomerOverdueAmountResponse, error)
	// PRODUCT INVOICE
	CreateProductInvoice(ctx context.Context, in *CreateProductInvoiceRequest, opts ...grpc.CallOption) (*CreateProductInvoiceResponse, error)
	UpdateProductInvoice(ctx context.Context, in *UpdateProductInvoiceRequest, opts ...grpc.CallOption) (*UpdateProductInvoiceResponse, error)
	ListProductInvoice(ctx context.Context, in *ListProductInvoiceRequest, opts ...grpc.CallOption) (*ListProductInvoiceResponse, error)
	// NEED TO REFACTOR
	GetCustomerInstallmentProducts(ctx context.Context, in *GetCustomerInstallmentProductsRequest, opts ...grpc.CallOption) (*GetCustomerInstallmentProductsResponse, error)
	GetCustomerInstallment(ctx context.Context, in *CustomerInstallmentRequest, opts ...grpc.CallOption) (*CustomerInstallmentResponse, error)
	// AGGREGATION
	OverallInstallmentsRate(ctx context.Context, in *OverallInstallmentsRateRequest, opts ...grpc.CallOption) (*OverallInstallmentsRateResponse, error)
	AggregateByMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AggregateByMerchantResponse, error)
	OverallProfitLoss(ctx context.Context, in *OverallProfitLossRequest, opts ...grpc.CallOption) (*OverallProfitLossResponse, error)
	MakeDownPayment(ctx context.Context, in *MakeDownPaymentRequest, opts ...grpc.CallOption) (*MakeDownPaymentResponse, error)
	InstallmentCreateByOrderId(ctx context.Context, in *InstallmentCreateByOrderIdRequest, opts ...grpc.CallOption) (*InstallmentCreateByOrderIdResponse, error)
}

type installmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstallmentServiceClient(cc *grpc.ClientConn) InstallmentServiceClient {
	return &installmentServiceClient{cc}
}

func (c *installmentServiceClient) ListInstallments(ctx context.Context, in *ListInstallmentsRequest, opts ...grpc.CallOption) (*ListInstallmentsResponse, error) {
	out := new(ListInstallmentsResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListInstallments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListInstallmentStates(ctx context.Context, in *ListInstallmentStatesRequest, opts ...grpc.CallOption) (*ListInstallmentStatesResponse, error) {
	out := new(ListInstallmentStatesResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListInstallmentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListInstallmentStatuses(ctx context.Context, in *ListInstallmentStatusesRequest, opts ...grpc.CallOption) (*ListInstallmentStatusesResponse, error) {
	out := new(ListInstallmentStatusesResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListInstallmentStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListInstallmentAttachments(ctx context.Context, in *ListInstallmentAttachmentsRequest, opts ...grpc.CallOption) (*ListInstallmentAttachmentsResponse, error) {
	out := new(ListInstallmentAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListInstallmentAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateInstallmentAttachment(ctx context.Context, in *CreateInstallmentAttachmentRequest, opts ...grpc.CallOption) (*CreateInstallmentAttachmentResponse, error) {
	out := new(CreateInstallmentAttachmentResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateInstallmentAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListInstallmentPayments(ctx context.Context, in *ListInstallmentPaymentsRequest, opts ...grpc.CallOption) (*ListInstallmentPaymentsResponse, error) {
	out := new(ListInstallmentPaymentsResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListInstallmentPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetInstallmentById(ctx context.Context, in *GetInstallmentByIdRequest, opts ...grpc.CallOption) (*GetInstallmentByIdResponse, error) {
	out := new(GetInstallmentByIdResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetInstallmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetInstallmentByContractNumber(ctx context.Context, in *GetInstallmentByContractNumberRequest, opts ...grpc.CallOption) (*GetInstallmentByContractNumberResponse, error) {
	out := new(GetInstallmentByContractNumberResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetInstallmentByContractNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetInstallmentByApplicationId(ctx context.Context, in *GetInstallmentByApplicationIdRequest, opts ...grpc.CallOption) (*GetInstallmentByApplicationIdResponse, error) {
	out := new(GetInstallmentByApplicationIdResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetInstallmentByApplicationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) InstallmentCancel(ctx context.Context, in *InstallmentCancelRequest, opts ...grpc.CallOption) (*InstallmentCancelResponse, error) {
	out := new(InstallmentCancelResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/InstallmentCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) BillingReset(ctx context.Context, in *BillingResetRequest, opts ...grpc.CallOption) (*BillingResetResponse, error) {
	out := new(BillingResetResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/BillingReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetPaymentSchedule(ctx context.Context, in *GetPaymentScheduleRequest, opts ...grpc.CallOption) (*GetPaymentScheduleResponse, error) {
	out := new(GetPaymentScheduleResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetPaymentSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CustomerAgreementAccept(ctx context.Context, in *CustomerAgreementAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CustomerAgreementAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetApplicationId(ctx context.Context, in *GetApplicationIdRequest, opts ...grpc.CallOption) (*GetApplicationIdResponse, error) {
	out := new(GetApplicationIdResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetApplicationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListApplicationStates(ctx context.Context, in *ListApplicationStatesRequest, opts ...grpc.CallOption) (*ListApplicationStatesResponse, error) {
	out := new(ListApplicationStatesResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListApplicationStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) UpdateApplication(ctx context.Context, in *InstallmentApplication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListApplicationBasket(ctx context.Context, in *ListApplicationBasketRequest, opts ...grpc.CallOption) (*ListApplicationBasketResponse, error) {
	out := new(ListApplicationBasketResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListApplicationBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListApplicationStatuses(ctx context.Context, in *ListApplicationStatusesRequest, opts ...grpc.CallOption) (*ListApplicationStatusesResponse, error) {
	out := new(ListApplicationStatusesResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListApplicationStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateApplicationMarketplace(ctx context.Context, in *CreateApplicationMarketplaceRequest, opts ...grpc.CallOption) (*CreateApplicationMarketplaceResponse, error) {
	out := new(CreateApplicationMarketplaceResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateApplicationMarketplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ScanQrForMarketplace(ctx context.Context, in *ScanQrForMarketplaceRequest, opts ...grpc.CallOption) (*ScanQrForMarketplaceResponse, error) {
	out := new(ScanQrForMarketplaceResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ScanQrForMarketplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateInstallmentByMarketplaceOffer(ctx context.Context, in *CreateInstallmentByMarketplaceOfferRequest, opts ...grpc.CallOption) (*CreateInstallmentByMarketplaceOfferResponse, error) {
	out := new(CreateInstallmentByMarketplaceOfferResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateInstallmentByMarketplaceOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateApplicationWebPortal(ctx context.Context, in *CreateApplicationWebPortalRequest, opts ...grpc.CallOption) (*CreateApplicationWebPortalResponse, error) {
	out := new(CreateApplicationWebPortalResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateApplicationWebPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ApplicationCancel(ctx context.Context, in *ApplicationCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ApplicationCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetInstallmentDetailsByContractNumber(ctx context.Context, in *InstallmentDetailsRequest, opts ...grpc.CallOption) (*InstallmentDetailsResponse, error) {
	out := new(InstallmentDetailsResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetInstallmentDetailsByContractNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetCustomerOverdueAmount(ctx context.Context, in *GetCustomerOverdueAmountRequest, opts ...grpc.CallOption) (*GetCustomerOverdueAmountResponse, error) {
	out := new(GetCustomerOverdueAmountResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetCustomerOverdueAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) CreateProductInvoice(ctx context.Context, in *CreateProductInvoiceRequest, opts ...grpc.CallOption) (*CreateProductInvoiceResponse, error) {
	out := new(CreateProductInvoiceResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/CreateProductInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) UpdateProductInvoice(ctx context.Context, in *UpdateProductInvoiceRequest, opts ...grpc.CallOption) (*UpdateProductInvoiceResponse, error) {
	out := new(UpdateProductInvoiceResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/UpdateProductInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) ListProductInvoice(ctx context.Context, in *ListProductInvoiceRequest, opts ...grpc.CallOption) (*ListProductInvoiceResponse, error) {
	out := new(ListProductInvoiceResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/ListProductInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetCustomerInstallmentProducts(ctx context.Context, in *GetCustomerInstallmentProductsRequest, opts ...grpc.CallOption) (*GetCustomerInstallmentProductsResponse, error) {
	out := new(GetCustomerInstallmentProductsResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetCustomerInstallmentProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) GetCustomerInstallment(ctx context.Context, in *CustomerInstallmentRequest, opts ...grpc.CallOption) (*CustomerInstallmentResponse, error) {
	out := new(CustomerInstallmentResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/GetCustomerInstallment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) OverallInstallmentsRate(ctx context.Context, in *OverallInstallmentsRateRequest, opts ...grpc.CallOption) (*OverallInstallmentsRateResponse, error) {
	out := new(OverallInstallmentsRateResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/OverallInstallmentsRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) AggregateByMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AggregateByMerchantResponse, error) {
	out := new(AggregateByMerchantResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/AggregateByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) OverallProfitLoss(ctx context.Context, in *OverallProfitLossRequest, opts ...grpc.CallOption) (*OverallProfitLossResponse, error) {
	out := new(OverallProfitLossResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/OverallProfitLoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) MakeDownPayment(ctx context.Context, in *MakeDownPaymentRequest, opts ...grpc.CallOption) (*MakeDownPaymentResponse, error) {
	out := new(MakeDownPaymentResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/MakeDownPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentServiceClient) InstallmentCreateByOrderId(ctx context.Context, in *InstallmentCreateByOrderIdRequest, opts ...grpc.CallOption) (*InstallmentCreateByOrderIdResponse, error) {
	out := new(InstallmentCreateByOrderIdResponse)
	err := c.cc.Invoke(ctx, "/installment_service.InstallmentService/InstallmentCreateByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentServiceServer is the server API for InstallmentService service.
type InstallmentServiceServer interface {
	// INSTALLMENT
	ListInstallments(context.Context, *ListInstallmentsRequest) (*ListInstallmentsResponse, error)
	ListInstallmentStates(context.Context, *ListInstallmentStatesRequest) (*ListInstallmentStatesResponse, error)
	ListInstallmentStatuses(context.Context, *ListInstallmentStatusesRequest) (*ListInstallmentStatusesResponse, error)
	ListInstallmentAttachments(context.Context, *ListInstallmentAttachmentsRequest) (*ListInstallmentAttachmentsResponse, error)
	CreateInstallmentAttachment(context.Context, *CreateInstallmentAttachmentRequest) (*CreateInstallmentAttachmentResponse, error)
	ListInstallmentPayments(context.Context, *ListInstallmentPaymentsRequest) (*ListInstallmentPaymentsResponse, error)
	GetInstallmentById(context.Context, *GetInstallmentByIdRequest) (*GetInstallmentByIdResponse, error)
	GetInstallmentByContractNumber(context.Context, *GetInstallmentByContractNumberRequest) (*GetInstallmentByContractNumberResponse, error)
	GetInstallmentByApplicationId(context.Context, *GetInstallmentByApplicationIdRequest) (*GetInstallmentByApplicationIdResponse, error)
	InstallmentCancel(context.Context, *InstallmentCancelRequest) (*InstallmentCancelResponse, error)
	// BILLNING
	BillingReset(context.Context, *BillingResetRequest) (*BillingResetResponse, error)
	// PAYMENT SCHEDULE
	GetPaymentSchedule(context.Context, *GetPaymentScheduleRequest) (*GetPaymentScheduleResponse, error)
	// PAY REGISTRATION
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	CustomerAgreementAccept(context.Context, *CustomerAgreementAcceptRequest) (*emptypb.Empty, error)
	GetApplicationId(context.Context, *GetApplicationIdRequest) (*GetApplicationIdResponse, error)
	// APPLICATION
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationResponse, error)
	ListApplicationStates(context.Context, *ListApplicationStatesRequest) (*ListApplicationStatesResponse, error)
	UpdateApplication(context.Context, *InstallmentApplication) (*emptypb.Empty, error)
	ListApplicationBasket(context.Context, *ListApplicationBasketRequest) (*ListApplicationBasketResponse, error)
	ListApplicationStatuses(context.Context, *ListApplicationStatusesRequest) (*ListApplicationStatusesResponse, error)
	// MARKETPLACE
	CreateApplicationMarketplace(context.Context, *CreateApplicationMarketplaceRequest) (*CreateApplicationMarketplaceResponse, error)
	ScanQrForMarketplace(context.Context, *ScanQrForMarketplaceRequest) (*ScanQrForMarketplaceResponse, error)
	CreateInstallmentByMarketplaceOffer(context.Context, *CreateInstallmentByMarketplaceOfferRequest) (*CreateInstallmentByMarketplaceOfferResponse, error)
	// WEB PORTAL
	CreateApplicationWebPortal(context.Context, *CreateApplicationWebPortalRequest) (*CreateApplicationWebPortalResponse, error)
	ApplicationCancel(context.Context, *ApplicationCancelRequest) (*emptypb.Empty, error)
	//
	GetInstallmentDetailsByContractNumber(context.Context, *InstallmentDetailsRequest) (*InstallmentDetailsResponse, error)
	GetCustomerOverdueAmount(context.Context, *GetCustomerOverdueAmountRequest) (*GetCustomerOverdueAmountResponse, error)
	// PRODUCT INVOICE
	CreateProductInvoice(context.Context, *CreateProductInvoiceRequest) (*CreateProductInvoiceResponse, error)
	UpdateProductInvoice(context.Context, *UpdateProductInvoiceRequest) (*UpdateProductInvoiceResponse, error)
	ListProductInvoice(context.Context, *ListProductInvoiceRequest) (*ListProductInvoiceResponse, error)
	// NEED TO REFACTOR
	GetCustomerInstallmentProducts(context.Context, *GetCustomerInstallmentProductsRequest) (*GetCustomerInstallmentProductsResponse, error)
	GetCustomerInstallment(context.Context, *CustomerInstallmentRequest) (*CustomerInstallmentResponse, error)
	// AGGREGATION
	OverallInstallmentsRate(context.Context, *OverallInstallmentsRateRequest) (*OverallInstallmentsRateResponse, error)
	AggregateByMerchant(context.Context, *emptypb.Empty) (*AggregateByMerchantResponse, error)
	OverallProfitLoss(context.Context, *OverallProfitLossRequest) (*OverallProfitLossResponse, error)
	MakeDownPayment(context.Context, *MakeDownPaymentRequest) (*MakeDownPaymentResponse, error)
	InstallmentCreateByOrderId(context.Context, *InstallmentCreateByOrderIdRequest) (*InstallmentCreateByOrderIdResponse, error)
}

// UnimplementedInstallmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInstallmentServiceServer struct {
}

func (*UnimplementedInstallmentServiceServer) ListInstallments(ctx context.Context, req *ListInstallmentsRequest) (*ListInstallmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallments not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListInstallmentStates(ctx context.Context, req *ListInstallmentStatesRequest) (*ListInstallmentStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallmentStates not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListInstallmentStatuses(ctx context.Context, req *ListInstallmentStatusesRequest) (*ListInstallmentStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallmentStatuses not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListInstallmentAttachments(ctx context.Context, req *ListInstallmentAttachmentsRequest) (*ListInstallmentAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallmentAttachments not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateInstallmentAttachment(ctx context.Context, req *CreateInstallmentAttachmentRequest) (*CreateInstallmentAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstallmentAttachment not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListInstallmentPayments(ctx context.Context, req *ListInstallmentPaymentsRequest) (*ListInstallmentPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallmentPayments not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetInstallmentById(ctx context.Context, req *GetInstallmentByIdRequest) (*GetInstallmentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallmentById not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetInstallmentByContractNumber(ctx context.Context, req *GetInstallmentByContractNumberRequest) (*GetInstallmentByContractNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallmentByContractNumber not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetInstallmentByApplicationId(ctx context.Context, req *GetInstallmentByApplicationIdRequest) (*GetInstallmentByApplicationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallmentByApplicationId not implemented")
}
func (*UnimplementedInstallmentServiceServer) InstallmentCancel(ctx context.Context, req *InstallmentCancelRequest) (*InstallmentCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCancel not implemented")
}
func (*UnimplementedInstallmentServiceServer) BillingReset(ctx context.Context, req *BillingResetRequest) (*BillingResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillingReset not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetPaymentSchedule(ctx context.Context, req *GetPaymentScheduleRequest) (*GetPaymentScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentSchedule not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateApplication(ctx context.Context, req *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetApplication(ctx context.Context, req *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (*UnimplementedInstallmentServiceServer) CustomerAgreementAccept(ctx context.Context, req *CustomerAgreementAcceptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerAgreementAccept not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetApplicationId(ctx context.Context, req *GetApplicationIdRequest) (*GetApplicationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationId not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListApplications(ctx context.Context, req *ListApplicationsRequest) (*ListApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListApplicationStates(ctx context.Context, req *ListApplicationStatesRequest) (*ListApplicationStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationStates not implemented")
}
func (*UnimplementedInstallmentServiceServer) UpdateApplication(ctx context.Context, req *InstallmentApplication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListApplicationBasket(ctx context.Context, req *ListApplicationBasketRequest) (*ListApplicationBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationBasket not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListApplicationStatuses(ctx context.Context, req *ListApplicationStatusesRequest) (*ListApplicationStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationStatuses not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateApplicationMarketplace(ctx context.Context, req *CreateApplicationMarketplaceRequest) (*CreateApplicationMarketplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationMarketplace not implemented")
}
func (*UnimplementedInstallmentServiceServer) ScanQrForMarketplace(ctx context.Context, req *ScanQrForMarketplaceRequest) (*ScanQrForMarketplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanQrForMarketplace not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateInstallmentByMarketplaceOffer(ctx context.Context, req *CreateInstallmentByMarketplaceOfferRequest) (*CreateInstallmentByMarketplaceOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstallmentByMarketplaceOffer not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateApplicationWebPortal(ctx context.Context, req *CreateApplicationWebPortalRequest) (*CreateApplicationWebPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationWebPortal not implemented")
}
func (*UnimplementedInstallmentServiceServer) ApplicationCancel(ctx context.Context, req *ApplicationCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCancel not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetInstallmentDetailsByContractNumber(ctx context.Context, req *InstallmentDetailsRequest) (*InstallmentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallmentDetailsByContractNumber not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetCustomerOverdueAmount(ctx context.Context, req *GetCustomerOverdueAmountRequest) (*GetCustomerOverdueAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOverdueAmount not implemented")
}
func (*UnimplementedInstallmentServiceServer) CreateProductInvoice(ctx context.Context, req *CreateProductInvoiceRequest) (*CreateProductInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductInvoice not implemented")
}
func (*UnimplementedInstallmentServiceServer) UpdateProductInvoice(ctx context.Context, req *UpdateProductInvoiceRequest) (*UpdateProductInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductInvoice not implemented")
}
func (*UnimplementedInstallmentServiceServer) ListProductInvoice(ctx context.Context, req *ListProductInvoiceRequest) (*ListProductInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductInvoice not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetCustomerInstallmentProducts(ctx context.Context, req *GetCustomerInstallmentProductsRequest) (*GetCustomerInstallmentProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerInstallmentProducts not implemented")
}
func (*UnimplementedInstallmentServiceServer) GetCustomerInstallment(ctx context.Context, req *CustomerInstallmentRequest) (*CustomerInstallmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerInstallment not implemented")
}
func (*UnimplementedInstallmentServiceServer) OverallInstallmentsRate(ctx context.Context, req *OverallInstallmentsRateRequest) (*OverallInstallmentsRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverallInstallmentsRate not implemented")
}
func (*UnimplementedInstallmentServiceServer) AggregateByMerchant(ctx context.Context, req *emptypb.Empty) (*AggregateByMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateByMerchant not implemented")
}
func (*UnimplementedInstallmentServiceServer) OverallProfitLoss(ctx context.Context, req *OverallProfitLossRequest) (*OverallProfitLossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverallProfitLoss not implemented")
}
func (*UnimplementedInstallmentServiceServer) MakeDownPayment(ctx context.Context, req *MakeDownPaymentRequest) (*MakeDownPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDownPayment not implemented")
}
func (*UnimplementedInstallmentServiceServer) InstallmentCreateByOrderId(ctx context.Context, req *InstallmentCreateByOrderIdRequest) (*InstallmentCreateByOrderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCreateByOrderId not implemented")
}

func RegisterInstallmentServiceServer(s *grpc.Server, srv InstallmentServiceServer) {
	s.RegisterService(&_InstallmentService_serviceDesc, srv)
}

func _InstallmentService_ListInstallments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListInstallments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListInstallments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListInstallments(ctx, req.(*ListInstallmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListInstallmentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListInstallmentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListInstallmentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListInstallmentStates(ctx, req.(*ListInstallmentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListInstallmentStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListInstallmentStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListInstallmentStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListInstallmentStatuses(ctx, req.(*ListInstallmentStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListInstallmentAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListInstallmentAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListInstallmentAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListInstallmentAttachments(ctx, req.(*ListInstallmentAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateInstallmentAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstallmentAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateInstallmentAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateInstallmentAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateInstallmentAttachment(ctx, req.(*CreateInstallmentAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListInstallmentPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListInstallmentPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListInstallmentPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListInstallmentPayments(ctx, req.(*ListInstallmentPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetInstallmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetInstallmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetInstallmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetInstallmentById(ctx, req.(*GetInstallmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetInstallmentByContractNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallmentByContractNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetInstallmentByContractNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetInstallmentByContractNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetInstallmentByContractNumber(ctx, req.(*GetInstallmentByContractNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetInstallmentByApplicationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallmentByApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetInstallmentByApplicationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetInstallmentByApplicationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetInstallmentByApplicationId(ctx, req.(*GetInstallmentByApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_InstallmentCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallmentCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).InstallmentCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/InstallmentCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).InstallmentCancel(ctx, req.(*InstallmentCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_BillingReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).BillingReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/BillingReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).BillingReset(ctx, req.(*BillingResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetPaymentSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetPaymentSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetPaymentSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetPaymentSchedule(ctx, req.(*GetPaymentScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CustomerAgreementAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerAgreementAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CustomerAgreementAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CustomerAgreementAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CustomerAgreementAccept(ctx, req.(*CustomerAgreementAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetApplicationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetApplicationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetApplicationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetApplicationId(ctx, req.(*GetApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListApplicationStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListApplicationStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListApplicationStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListApplicationStates(ctx, req.(*ListApplicationStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallmentApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).UpdateApplication(ctx, req.(*InstallmentApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListApplicationBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListApplicationBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListApplicationBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListApplicationBasket(ctx, req.(*ListApplicationBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListApplicationStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListApplicationStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListApplicationStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListApplicationStatuses(ctx, req.(*ListApplicationStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateApplicationMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateApplicationMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateApplicationMarketplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateApplicationMarketplace(ctx, req.(*CreateApplicationMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ScanQrForMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanQrForMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ScanQrForMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ScanQrForMarketplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ScanQrForMarketplace(ctx, req.(*ScanQrForMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateInstallmentByMarketplaceOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstallmentByMarketplaceOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateInstallmentByMarketplaceOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateInstallmentByMarketplaceOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateInstallmentByMarketplaceOffer(ctx, req.(*CreateInstallmentByMarketplaceOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateApplicationWebPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationWebPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateApplicationWebPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateApplicationWebPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateApplicationWebPortal(ctx, req.(*CreateApplicationWebPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ApplicationCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ApplicationCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ApplicationCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ApplicationCancel(ctx, req.(*ApplicationCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetInstallmentDetailsByContractNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallmentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetInstallmentDetailsByContractNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetInstallmentDetailsByContractNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetInstallmentDetailsByContractNumber(ctx, req.(*InstallmentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetCustomerOverdueAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOverdueAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetCustomerOverdueAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetCustomerOverdueAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetCustomerOverdueAmount(ctx, req.(*GetCustomerOverdueAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_CreateProductInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).CreateProductInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/CreateProductInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).CreateProductInvoice(ctx, req.(*CreateProductInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_UpdateProductInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).UpdateProductInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/UpdateProductInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).UpdateProductInvoice(ctx, req.(*UpdateProductInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_ListProductInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).ListProductInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/ListProductInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).ListProductInvoice(ctx, req.(*ListProductInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetCustomerInstallmentProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerInstallmentProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetCustomerInstallmentProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetCustomerInstallmentProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetCustomerInstallmentProducts(ctx, req.(*GetCustomerInstallmentProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_GetCustomerInstallment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerInstallmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).GetCustomerInstallment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/GetCustomerInstallment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).GetCustomerInstallment(ctx, req.(*CustomerInstallmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_OverallInstallmentsRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverallInstallmentsRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).OverallInstallmentsRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/OverallInstallmentsRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).OverallInstallmentsRate(ctx, req.(*OverallInstallmentsRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_AggregateByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).AggregateByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/AggregateByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).AggregateByMerchant(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_OverallProfitLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverallProfitLossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).OverallProfitLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/OverallProfitLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).OverallProfitLoss(ctx, req.(*OverallProfitLossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_MakeDownPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDownPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).MakeDownPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/MakeDownPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).MakeDownPayment(ctx, req.(*MakeDownPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentService_InstallmentCreateByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallmentCreateByOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentServiceServer).InstallmentCreateByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/installment_service.InstallmentService/InstallmentCreateByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentServiceServer).InstallmentCreateByOrderId(ctx, req.(*InstallmentCreateByOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InstallmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "installment_service.InstallmentService",
	HandlerType: (*InstallmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstallments",
			Handler:    _InstallmentService_ListInstallments_Handler,
		},
		{
			MethodName: "ListInstallmentStates",
			Handler:    _InstallmentService_ListInstallmentStates_Handler,
		},
		{
			MethodName: "ListInstallmentStatuses",
			Handler:    _InstallmentService_ListInstallmentStatuses_Handler,
		},
		{
			MethodName: "ListInstallmentAttachments",
			Handler:    _InstallmentService_ListInstallmentAttachments_Handler,
		},
		{
			MethodName: "CreateInstallmentAttachment",
			Handler:    _InstallmentService_CreateInstallmentAttachment_Handler,
		},
		{
			MethodName: "ListInstallmentPayments",
			Handler:    _InstallmentService_ListInstallmentPayments_Handler,
		},
		{
			MethodName: "GetInstallmentById",
			Handler:    _InstallmentService_GetInstallmentById_Handler,
		},
		{
			MethodName: "GetInstallmentByContractNumber",
			Handler:    _InstallmentService_GetInstallmentByContractNumber_Handler,
		},
		{
			MethodName: "GetInstallmentByApplicationId",
			Handler:    _InstallmentService_GetInstallmentByApplicationId_Handler,
		},
		{
			MethodName: "InstallmentCancel",
			Handler:    _InstallmentService_InstallmentCancel_Handler,
		},
		{
			MethodName: "BillingReset",
			Handler:    _InstallmentService_BillingReset_Handler,
		},
		{
			MethodName: "GetPaymentSchedule",
			Handler:    _InstallmentService_GetPaymentSchedule_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _InstallmentService_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _InstallmentService_GetApplication_Handler,
		},
		{
			MethodName: "CustomerAgreementAccept",
			Handler:    _InstallmentService_CustomerAgreementAccept_Handler,
		},
		{
			MethodName: "GetApplicationId",
			Handler:    _InstallmentService_GetApplicationId_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _InstallmentService_ListApplications_Handler,
		},
		{
			MethodName: "ListApplicationStates",
			Handler:    _InstallmentService_ListApplicationStates_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _InstallmentService_UpdateApplication_Handler,
		},
		{
			MethodName: "ListApplicationBasket",
			Handler:    _InstallmentService_ListApplicationBasket_Handler,
		},
		{
			MethodName: "ListApplicationStatuses",
			Handler:    _InstallmentService_ListApplicationStatuses_Handler,
		},
		{
			MethodName: "CreateApplicationMarketplace",
			Handler:    _InstallmentService_CreateApplicationMarketplace_Handler,
		},
		{
			MethodName: "ScanQrForMarketplace",
			Handler:    _InstallmentService_ScanQrForMarketplace_Handler,
		},
		{
			MethodName: "CreateInstallmentByMarketplaceOffer",
			Handler:    _InstallmentService_CreateInstallmentByMarketplaceOffer_Handler,
		},
		{
			MethodName: "CreateApplicationWebPortal",
			Handler:    _InstallmentService_CreateApplicationWebPortal_Handler,
		},
		{
			MethodName: "ApplicationCancel",
			Handler:    _InstallmentService_ApplicationCancel_Handler,
		},
		{
			MethodName: "GetInstallmentDetailsByContractNumber",
			Handler:    _InstallmentService_GetInstallmentDetailsByContractNumber_Handler,
		},
		{
			MethodName: "GetCustomerOverdueAmount",
			Handler:    _InstallmentService_GetCustomerOverdueAmount_Handler,
		},
		{
			MethodName: "CreateProductInvoice",
			Handler:    _InstallmentService_CreateProductInvoice_Handler,
		},
		{
			MethodName: "UpdateProductInvoice",
			Handler:    _InstallmentService_UpdateProductInvoice_Handler,
		},
		{
			MethodName: "ListProductInvoice",
			Handler:    _InstallmentService_ListProductInvoice_Handler,
		},
		{
			MethodName: "GetCustomerInstallmentProducts",
			Handler:    _InstallmentService_GetCustomerInstallmentProducts_Handler,
		},
		{
			MethodName: "GetCustomerInstallment",
			Handler:    _InstallmentService_GetCustomerInstallment_Handler,
		},
		{
			MethodName: "OverallInstallmentsRate",
			Handler:    _InstallmentService_OverallInstallmentsRate_Handler,
		},
		{
			MethodName: "AggregateByMerchant",
			Handler:    _InstallmentService_AggregateByMerchant_Handler,
		},
		{
			MethodName: "OverallProfitLoss",
			Handler:    _InstallmentService_OverallProfitLoss_Handler,
		},
		{
			MethodName: "MakeDownPayment",
			Handler:    _InstallmentService_MakeDownPayment_Handler,
		},
		{
			MethodName: "InstallmentCreateByOrderId",
			Handler:    _InstallmentService_InstallmentCreateByOrderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "installment_service.proto",
}
